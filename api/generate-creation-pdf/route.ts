import { type NextRequest, NextResponse } from "next/server"
import { jsPDF } from "jspdf"

export async function POST(request: NextRequest) {
  try {
    const { creation } = await request.json()

    if (!creation) {
      return NextResponse.json({ error: "Creation data is required" }, { status: 400 })
    }

    // Create PDF
    const doc = new jsPDF()

    // Add header background
    doc.setFillColor(37, 99, 235)
    doc.rect(0, 0, 210, 40, "F")

    // Add title
    doc.setTextColor(255, 255, 255)
    doc.setFont("helvetica", "bold")
    doc.setFontSize(20)
    doc.text(creation.title, 20, 25)

    // Add generation date
    doc.setFontSize(10)
    doc.text(`Created: ${new Date(creation.created_at).toLocaleDateString()}`, 150, 32)

    // Reset text color for body
    doc.setTextColor(0, 0, 0)
    doc.setFont("helvetica", "normal")

    const yPosition = 60

    // Add content
    doc.setFontSize(12)
    const splitContent = doc.splitTextToSize(creation.content, 170)
    doc.text(splitContent, 20, yPosition)

    // Add footer
    const pageCount = doc.getNumberOfPages()
    for (let i = 1; i <= pageCount; i++) {
      doc.setPage(i)
      doc.setFillColor(248, 250, 252)
      doc.rect(0, 280, 210, 17, "F")
      doc.setFontSize(9)
      doc.setTextColor(100, 116, 139)
      doc.text("Generated by The Next Level U", 20, 290)
      doc.text(`Page ${i} of ${pageCount}`, 170, 290)
    }

    // Generate PDF buffer
    const pdfBuffer = Buffer.from(doc.output("arraybuffer"))

    return new NextResponse(pdfBuffer, {
      headers: {
        "Content-Type": "application/pdf",
        "Content-Disposition": `attachment; filename="${creation.title.replace(/\s+/g, "_")}.pdf"`,
      },
    })
  } catch (error) {
    console.error("Error generating PDF:", error)
    return NextResponse.json({ error: "Failed to generate PDF" }, { status: 500 })
  }
}
