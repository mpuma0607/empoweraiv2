import { type NextRequest, NextResponse } from "next/server"
import { jsPDF } from "jspdf"

export async function POST(request: NextRequest) {
  try {
    const { formData, script } = await request.json()

    // Create PDF using jsPDF
    const pdf = new jsPDF({
      orientation: "portrait",
      unit: "mm",
      format: "a4",
    })

    // Set up fonts and colors
    pdf.setFont("helvetica")

    // Header section with Vegas Gold background
    pdf.setFillColor(182, 168, 136) // Vegas Gold color
    pdf.rect(0, 0, 210, 40, "F")

    // Header text
    pdf.setTextColor(255, 255, 255) // White text
    pdf.setFontSize(24)
    pdf.text("Professional Real Estate Script", 105, 20, { align: "center" })
    pdf.setFontSize(12)
    pdf.text("Generated by ScriptIT - The Next Level U", 105, 30, { align: "center" })

    // Reset text color to black
    pdf.setTextColor(0, 0, 0)

    // Script details
    pdf.setFontSize(18)
    pdf.setFont("helvetica", "bold")
    pdf.text(`${formData.agentName} - ${formData.brokerageName}`, 20, 60)

    // Script type and topic
    const scriptTypeMap: { [key: string]: string } = {
      email: "Email Script",
      phone: "Phone Call Script",
      text: "Text Message Script",
      video: "Video Script",
      doorknocking: "Door Knocking Script",
    }

    const topicMap: { [key: string]: string } = {
      "expired-listing": "Expired Listing",
      "first-time-homebuyer": "First Time Homebuyer",
      "past-client": "Past Client",
      neighbor: "Neighbor",
      fsbo: "FSBO (For Sale By Owner)",
      "homeowner-high-equity": "Homeowner with High Equity",
      foreclosure: "Foreclosure",
      rental: "Rental",
      divorce: "Divorce",
      "just-sold": "Just Sold",
    }

    const scriptTypeLabel = scriptTypeMap[formData.scriptType] || formData.scriptType
    const topicLabel = formData.topic === "other" ? formData.customTopic : topicMap[formData.topic] || formData.topic

    pdf.setTextColor(182, 168, 136) // Vegas Gold
    pdf.setFontSize(16)
    pdf.text(`${scriptTypeLabel} - ${topicLabel}`, 20, 70)

    // Divider line
    pdf.setDrawColor(229, 231, 235)
    pdf.line(20, 75, 190, 75)

    // Script content
    pdf.setTextColor(0, 0, 0)
    pdf.setFontSize(11)
    pdf.setFont("helvetica", "normal")
    const splitScript = pdf.splitTextToSize(script, 170)
    pdf.text(splitScript, 20, 85)

    // Calculate where script ends for footer
    const scriptHeight = splitScript.length * 5
    let currentY = 85 + scriptHeight + 15

    // Make sure footer doesn't go off page
    if (currentY > 250) {
      pdf.addPage()
      currentY = 20
    }

    // Footer
    pdf.setFillColor(249, 250, 251)
    pdf.rect(0, currentY, 210, 30, "F")

    pdf.setFontSize(8)
    pdf.setTextColor(107, 114, 128)
    pdf.text("Â© 2024 The Next Level U - Empowering Real Estate Professionals", 105, currentY + 10, { align: "center" })
    pdf.text("Generated with AI-powered tools designed for real estate success", 105, currentY + 16, {
      align: "center",
    })
    pdf.text(`Script for: ${formData.agentName}`, 105, currentY + 22, { align: "center" })

    const pdfBuffer = Buffer.from(pdf.output("arraybuffer"))

    return new NextResponse(pdfBuffer, {
      headers: {
        "Content-Type": "application/pdf",
        "Content-Disposition": `attachment; filename="${formData.agentName.replace(/\s+/g, "_")}_${formData.scriptType}_Script.pdf"`,
      },
    })
  } catch (error) {
    console.error("Error generating PDF:", error)
    return NextResponse.json({ error: "Failed to generate PDF" }, { status: 500 })
  }
}
