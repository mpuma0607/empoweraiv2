import { type NextRequest, NextResponse } from "next/server"
import { jsPDF } from "jspdf"

export async function POST(request: NextRequest) {
  try {
    const { formData, plan } = await request.json()

    // Replace the entire PDF generation section with enhanced formatting
    const pdf = new jsPDF({
      orientation: "portrait",
      unit: "mm",
      format: "a4",
    })

    // Set up professional styling
    pdf.setFont("helvetica")

    // Modern header with gradient effect
    pdf.setFillColor(59, 130, 246) // Blue-600
    pdf.rect(0, 0, 210, 45, "F")

    // Header content
    pdf.setTextColor(255, 255, 255)
    pdf.setFontSize(26)
    pdf.setFont("helvetica", "bold")
    pdf.text("DAILY ACTION PLAN", 105, 20, { align: "center" })

    pdf.setFontSize(14)
    pdf.setFont("helvetica", "normal")
    pdf.text(`${formData.name} • ${new Date().toLocaleDateString()}`, 105, 30, { align: "center" })

    pdf.setFontSize(12)
    pdf.text(
      `Target: ${formData.prospectType === "Other" ? formData.customProspectType : formData.prospectType}`,
      105,
      38,
      { align: "center" },
    )

    // Reset for body content
    pdf.setTextColor(0, 0, 0)
    let currentY = 55

    // Add prospect focus section
    pdf.setFillColor(239, 246, 255) // Blue-50
    pdf.rect(15, currentY - 5, 180, 15, "F")
    pdf.setFontSize(14)
    pdf.setFont("helvetica", "bold")
    pdf.setTextColor(30, 64, 175) // Blue-800
    pdf.text("🎯 PROSPECTING FOCUS", 20, currentY + 5)
    currentY += 20

    pdf.setFontSize(11)
    pdf.setFont("helvetica", "normal")
    pdf.setTextColor(55, 65, 81) // Gray-700
    const focusText = `Target Audience: ${formData.prospectType === "Other" ? formData.customProspectType : formData.prospectType}`
    pdf.text(focusText, 20, currentY)
    currentY += 8

    if (formData.specificGoals) {
      const goalText = pdf.splitTextToSize(`Goals: ${formData.specificGoals}`, 170)
      pdf.text(goalText, 20, currentY)
      currentY += goalText.length * 5 + 10
    } else {
      currentY += 10
    }

    // Process the plan content with better formatting
    const cleanPlan = plan.replace(/[🔍📱📞📧📊]/gu, "").trim()
    const sections = cleanPlan.split(/(?=^[A-Z\s]+:)/gm).filter((section) => section.trim())

    sections.forEach((section, index) => {
      const lines = section.trim().split("\n")
      const title = lines[0].replace(/:/g, "").trim()

      // Check if we need a new page
      if (currentY > 250) {
        pdf.addPage()
        currentY = 20
      }

      // Section header with colored background
      const colors = [
        [16, 185, 129], // Emerald-500
        [139, 92, 246], // Violet-500
        [236, 72, 153], // Pink-500
        [245, 158, 11], // Amber-500
        [6, 182, 212], // Cyan-500
      ]
      const color = colors[index % colors.length]

      pdf.setFillColor(color[0], color[1], color[2])
      pdf.rect(15, currentY - 3, 180, 12, "F")

      pdf.setTextColor(255, 255, 255)
      pdf.setFontSize(12)
      pdf.setFont("helvetica", "bold")
      pdf.text(title, 20, currentY + 4)
      currentY += 15

      // Section content
      pdf.setTextColor(55, 65, 81)
      pdf.setFontSize(10)
      pdf.setFont("helvetica", "normal")

      const content = lines.slice(1).join("\n").trim()
      if (content) {
        const splitContent = pdf.splitTextToSize(content, 170)
        pdf.text(splitContent, 20, currentY)
        currentY += splitContent.length * 4 + 15
      }
    })

    // Professional footer
    pdf.setFillColor(248, 250, 252) // Gray-50
    pdf.rect(0, 277, 210, 20, "F")

    pdf.setFontSize(8)
    pdf.setTextColor(107, 114, 128) // Gray-500
    pdf.text("© 2024 The Next Level U - Professional Real Estate Training", 105, 283, { align: "center" })
    pdf.text("Generated by Action AI - Your Daily Success Partner", 105, 288, { align: "center" })

    const pdfBuffer = Buffer.from(pdf.output("arraybuffer"))

    return new NextResponse(pdfBuffer, {
      headers: {
        "Content-Type": "application/pdf",
        "Content-Disposition": `attachment; filename="Daily_Action_Plan_${new Date().toLocaleDateString().replace(/\//g, "-")}.pdf"`,
      },
    })
  } catch (error) {
    console.error("Error generating PDF:", error)
    return NextResponse.json({ error: "Failed to generate PDF" }, { status: 500 })
  }
}
